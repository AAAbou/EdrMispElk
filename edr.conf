input {
	http {
                id => "EDR"
                port => 8080
                type => "EDR"
        }
}

filter {
	## Domain TI Lookup
	#if [destination][domain] {
	if [target_dns_name] {
		memcached {
			hosts => ["memcached:11211"]
        		get => {
			  "domain-%{[target_dns_name]}" => "misp_feed"
			}
		}

		#if [misp][feed][domain] {
		if [misp_feed] {
			ruby {
			  init => "
			    require 'net/http'
			    require 'uri'
			    require 'json'
			"
			code => "
			uri = URI.parse('https://MISP_IP/attributes/restSearch') #insert your MISP address here
			request = Net::HTTP::Post.new(uri)
			request.content_type = 'application/json'
			request['Accept'] = 'application/json'
			request['Authorization'] = 'MISP_API' #insert your MISP API key here
			request.body = JSON.dump({
			  'returnFormat' => 'json',
			  'includeEventTags' => 'yes',
			  'value' => event.get('[target_dns_name]')
			  #'value' => event.get('[destination][domain]')
			})

			req_options = {
			  use_ssl: uri.scheme == 'https',
			  verify_mode: OpenSSL::SSL::VERIFY_NONE,
        		}

			response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
			http.request(request)
			end

	        	if response.code == '200'
        	          result = JSON.parse(response.body)
            		  #event.set('MISP.all', result)
	            	  mispeventinfoarr = []
        	    	  mispattributetagarr = []

            		  for e in result['response']['Attribute']
	                    for t in e['Tag']
        	            mispattributetagarr.push(t['name'])
                	    end
	            	  mispeventinfoarr.push(e['Event']['info'])
        	    	  end
            		  event.set('[misp][tag]', mispattributetagarr.uniq)
	            	  event.set('[misp][eventinfo]', mispeventinfoarr.uniq)
        	    	  end
            		  "
			}
		} #if misp domain
	} #if domain

	## Hash TI Lookup
	if [target_process_backing_file_md5]  or [target_process_backing_file_sha256]{
		if [target_process_backing_file_md5] {
			memcached {
				hosts => ["memcached:11211"]
   	    	 		get => {
				  "md5-%{[target_process_backing_file_md5]}" => "misp_feed_hash"
			  	  "domain-%{[tmp_misp_domain]}" => "misp_feed"
				}
			}
		}
		if [target_process_backing_file_sha256] {
			memcached {
				hosts => ["memcached:11211"]
				get => {
					"sha256-%{[target_process_backing_file_sha256]}" => "misp_feed_hash"
				}
			}
		}

		if [misp_feed_hash] {
			ruby {
			  init => "
			    require 'net/http'
			    require 'uri'
			    require 'json'
			"
			code => "
			uri = URI.parse('https://MISP_IP/attributes/restSearch') #insert your MISP address here
			request = Net::HTTP::Post.new(uri)
			request.content_type = 'application/json'
			request['Accept'] = 'application/json'
			request['Authorization'] = 'MISP_API' #insert your MISP API key here
			request.body = JSON.dump({
			  'returnFormat' => 'json',
			  'includeEventTags' => 'yes',
			  'value' => event.get('[destination][domain]')
			})

			req_options = {
			  use_ssl: uri.scheme == 'https',
			  verify_mode: OpenSSL::SSL::VERIFY_NONE,
	        	}

			response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|
			http.request(request)
			end

	        	if response.code == '200'
        	          result = JSON.parse(response.body)
            		  #event.set('MISP.all', result)
	            	  mispeventinfoarr = []
        	    	  mispattributetagarr = []

       	     	 	 for e in result['response']['Attribute']
	                    for t in e['Tag']
        	            mispattributetagarr.push(t['name'])
                	    end
	            	  mispeventinfoarr.push(e['Event']['info'])
        	    	  end
            		  event.set('[misp][tag]', mispattributetagarr.uniq)
	            	  event.set('[misp][eventinfo]', mispeventinfoarr.uniq)
        	    	  end
            		  "
			}
		} #if misp hash
	} #if hash
}
## Add your filters / logstash plugins configuration here

output {
	elasticsearch {
		hosts => "https://elasticsearch:9200"
		cacert => "${LS_CACERT_FILE}"
		user => "elastic"
		password => "changeme"
	}
	stdout { codec => rubydebug }
}
